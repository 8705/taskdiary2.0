# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

# An example Backbone application contributed by
# [Jérôme Gravel-Niquet](http://jgn.me/). This demo uses a simple
# [LocalStorage adapter](backbone-localstorage.html)
# to persist Backbone models within your browser.
# Load the application once the DOM is ready, using `jQuery.ready`:
$ ->
  # Todo Model
  # ----------
  # Our basic **Todo** model has `title`, `order`, and `done` attributes.
  Todo = Backbone.Model.extend(
    defaults: ->
      {
        title: 'empty todo...'
        order: Todos.nextOrder()
        done: false
      }
    toggle: ->
      @save done: !@get('done')
      return
  )
  # Todo Collection
  # ---------------
  # The collection of todos is backed by *localStorage* instead of a remote
  # server.
  TodoList = Backbone.Collection.extend(
    model: Todo
    localStorage: new (Backbone.LocalStorage)('todos-backbone')
    done: ->
      @where done: true
    remaining: ->
      @without.apply this, @done()
    nextOrder: ->
      if !@length
        return 1
      @last().get('order') + 1
    comparator: 'order')
  # Create our global collection of **Todos**.
  Todos = new TodoList
  # Todo Item View
  # --------------
  # The DOM element for a todo item...
  TodoView = Backbone.View.extend(
    tagName: 'li'
    template: _.template($('#item-template').html())
    events:
      'click .toggle': 'toggleDone'
      'dblclick .view': 'edit'
      'click a.destroy': 'clear'
      'keypress .edit': 'updateOnEnter'
      'blur .edit': 'close'
    initialize: ->
      @listenTo @model, 'change', @render
      @listenTo @model, 'destroy', @remove
      return
    render: ->
      @$el.html @template(@model.toJSON())
      @$el.toggleClass 'done', @model.get('done')
      @input = @$('.edit')
      this
    toggleDone: ->
      @model.toggle()
      return
    edit: ->
      @$el.addClass 'editing'
      @input.focus()
      return
    close: ->
      value = @input.val()
      if !value
        @clear()
      else
        @model.save title: value
        @$el.removeClass 'editing'
      return
    updateOnEnter: (e) ->
      if e.keyCode == 13
        @close()
      return
    clear: ->
      @model.destroy()
      return
  )
  # The Application
  # ---------------
  # Our overall **AppView** is the top-level piece of UI.
  AppView = Backbone.View.extend(
    el: $('#todoapp')
    statsTemplate: _.template($('#stats-template').html())
    events:
      'keypress #new-todo': 'createOnEnter'
      'click #clear-completed': 'clearCompleted'
      'click #toggle-all': 'toggleAllComplete'
    initialize: ->
      @input = @$('#new-todo')
      @allCheckbox = @$('#toggle-all')[0]
      @listenTo Todos, 'add', @addOne
      @listenTo Todos, 'reset', @addAll
      @listenTo Todos, 'all', @render
      @footer = @$('footer')
      @main = $('#main')
      Todos.fetch()
      return
    render: ->
      done = Todos.done().length
      remaining = Todos.remaining().length
      if Todos.length
        @main.show()
        @footer.show()
        @footer.html @statsTemplate(
          done: done
          remaining: remaining)
      else
        @main.hide()
        @footer.hide()
      @allCheckbox.checked = !remaining
      return
    addOne: (todo) ->
      view = new TodoView(model: todo)
      @$('#todo-list').append view.render().el
      return
    addAll: ->
      Todos.each @addOne, this
      return
    createOnEnter: (e) ->
      if e.keyCode != 13
        return
      if !@input.val()
        return
      Todos.create title: @input.val()
      @input.val ''
      return
    clearCompleted: ->
      _.invoke Todos.done(), 'destroy'
      false
    toggleAllComplete: ->
      done = @allCheckbox.checked
      Todos.each (todo) ->
        todo.save 'done': done
        return
      return
  )
  # Finally, we kick things off by creating the **App**.
  App = new AppView
  return

# ---
# generated by js2coffee 2.0.3
